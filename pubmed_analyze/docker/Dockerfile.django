# Utiliser une image Python comme base
FROM joachimlombardi/pubmed_dependencies:latest

ARG ALLOWED_HOSTS
ARG DATABASE_URL
ARG DATABASE_HOST
ARG DATABASE_USER
ARG DATABASE_PASSWORD
ARG DATABASE_NAME
ARG DATABASE_PORT
ARG EMAIL_HOST_USER
ARG EMAIL_HOST_PASSWORD
ARG OPENAI_API_KEY
ARG ERROR_NOTIFICATION_EMAIL 
ARG DEFAULT_FROM_EMAIL 

ENV ALLOWED_HOSTS=${ALLOWED_HOSTS}
ENV DATABASE_URL=${DATABASE_URL}
ENV DATABASE_HOST=${DATABASE_HOST}
ENV DATABASE_USER=${DATABASE_USER}
ENV DATABASE_PASSWORD=${DATABASE_PASSWORD}
ENV DATABASE_NAME=${DATABASE_NAME}
ENV DATABASE_PORT=${DATABASE_PORT}
ENV EMAIL_HOST_USER=${EMAIL_HOST_USER}
ENV EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
ENV OPENAI_API_KEY=${OPENAI_API_KEY}
ENV ERROR_NOTIFICATION_EMAIL=${EMAIL_HOST_USER}
ENV DEFAULT_FROM_EMAIL=${EMAIL_HOST_USER}

# Définir le répertoire de travail dans le conteneur
WORKDIR /pubmed_analyze

# Copier le reste de l'application
COPY ../ /pubmed_analyze/


# RUN echo "Exécution des migrations Django..." && \
#     python manage.py makemigrations && \
#     python manage.py migrate

# # Créer un superutilisateur si nécessaire
# RUN echo "Création du superutilisateur..." && \
#     python manage.py createsuperuser --noinput || echo "Superutilisateur déjà existant"

# # Exécuter des commandes personnalisées si nécessaire
# RUN echo "Exécution des commandes personnalisées..." && \
#     python manage.py commands article_to_database && \
#     python manage.py commands index_articles

# # Copier le script entrypoint
# COPY ./entrypoint.sh pubmed_analyze/entrypoint.sh

# # Donner les permissions d'exécution au script
# RUN chmod +x pubmed_analyze/entrypoint.sh

# Exposer le port 8000 pour Django
EXPOSE 8000

# Définir le point d'entrée pour exécuter le script
# ENTRYPOINT ["/entrypoint.sh"]

# Commande par défaut (lancée par ENTRYPOINT)
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
